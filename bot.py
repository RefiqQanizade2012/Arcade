# === bot.py ===
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from logic import *
import schedule
import threading
import time
from config import *
import os
import cv2

ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram user ID
bot = TeleBot(API_TOKEN)

def gen_markup(id):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å!", callback_data=id))
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    prize_id = call.data
    user_id = call.message.chat.id

    if manager.get_prize_winner_count(prize_id) < 3:
        if not manager.has_user_won_prize(user_id, prize_id):
            if manager.add_winner(user_id, prize_id):
                manager.add_bonus_points(user_id, 5)
            img = manager.get_prize_img(prize_id)
            if img:
                with open(f'img/{img}', 'rb') as photo:
                    bot.send_photo(user_id, photo)
        else:
            bot.answer_callback_query(call.id, "–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —ç—Ç–æ—Ç –ø—Ä–∏–∑!")
    else:
        bot.answer_callback_query(call.id, "–ü—Ä–∏–∑ —É–∂–µ –∑–∞–±—Ä–∞–ª–∏ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

def send_message():
    prize = manager.get_random_prize()
    if not prize:
        return

    prize_id, img = prize[:2]
    manager.set_last_prize_id(prize_id)
    manager.mark_prize_used(prize_id)
    hide_img(img)
    for user in manager.get_users():
        with open(f'hidden_img/{img}', 'rb') as photo:
            bot.send_photo(user, photo, reply_markup=gen_markup(id=prize_id))

def process_resend_requests():
    for user_id, prize_id in manager.get_resend_requests():
        img = manager.get_prize_img(prize_id)
        if img:
            with open(f'img/{img}', 'rb') as photo:
                bot.send_photo(user_id, photo, caption="–í–æ—Ç —Ç–≤–æ—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!")
    manager.clear_resend_requests()

def shedule_thread():
    schedule.every().minute.do(send_message)
    schedule.every().minute.do(process_resend_requests)
    while True:
        schedule.run_pending()
        time.sleep(1)

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    if user_id in manager.get_users():
        bot.reply_to(message, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    else:
        manager.add_user(user_id, message.from_user.username)
        bot.reply_to(message, """–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
–¢–µ–±—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏!
–ö–∞–∂–¥—ã–π —á–∞—Å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç —à–∞–Ω—Å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!
–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å!'

–¢–æ–ª—å–∫–æ —Ç—Ä–∏ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É!)""")

@bot.message_handler(commands=['rating'])
def handle_rating(message):
    rating = manager.get_user_rating()
    if not rating:
        bot.reply_to(message, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    table = "üèÜ –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:\n\n"
    for i, (username, points) in enumerate(rating, 1):
        table += f"{i}. @{username} ‚Äî {points} –±–∞–ª–ª–æ–≤\n"
    bot.reply_to(message, table)

@bot.message_handler(commands=['my_score'])
def get_my_score(message):
    user_id = message.chat.id
    user_imgs = manager.get_winners_img(user_id)
    all_imgs = manager.get_all_img_names()

    if not all_imgs:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫.")
        return

    collage = create_collage(user_imgs, all_imgs)
    if collage is None:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–∞–∂–∞.")
        return

    output_path = f'temp_collage_{user_id}.jpg'
    cv2.imwrite(output_path, collage)

    with open(output_path, 'rb') as photo:
        bot.send_photo(user_id, photo, caption="–í–æ—Ç —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!")

    os.remove(output_path)

@bot.message_handler(commands=['points'])
def handle_points(message):
    user_id = message.chat.id
    points = manager.get_user_points(user_id)
    bot.reply_to(message, f"–£ —Ç–µ–±—è {points} –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç ü™ô")

@bot.message_handler(commands=['resend'])
def handle_resend_request(message):
    user_id = message.chat.id
    last_prize = manager.get_last_prize_id()
    cost = 5
    if not last_prize:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return
    if manager.spend_points(user_id, cost):
        manager.request_resend(user_id, last_prize)
        bot.reply_to(message, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –° –≤–∞—Å —Å–ø–∏—Å–∞–Ω–æ {cost} –º–æ–Ω–µ—Ç.")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.")

@bot.message_handler(commands=['admin_add'])
def admin_add(message):
    if message.from_user.id != ADMIN_ID:
        return
    files = os.listdir('img')
    manager.add_prize([(f,) for f in files])
    bot.reply_to(message, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(files)} –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–æ–≤.")

def polling_thread():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    manager = DatabaseManager(DATABASE)
    manager.create_tables()

    polling_thread = threading.Thread(target=polling_thread)
    polling_shedule = threading.Thread(target=shedule_thread)

    polling_thread.start()
    polling_shedule.start()
